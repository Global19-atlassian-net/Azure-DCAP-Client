
// The below timeout is set in minutes
GLOBAL_TIMEOUT = 240

DOCKER_REGISTRY = "dcapdockerciregistry.azurecr.io"


// Tests running on hardware with custom path to libdcap_quoteprov.so
def ACCTest(String label, String version, String compiler, String build_type) {
    stage("${label} ${compiler} SGX1-FLC ${build_type}") {
        node("${label}") {
            timeout(GLOBAL_TIMEOUT) {
			
                cleanWs()
                checkout scm
				
                def dcap = load pwd() + "/.jenkins/src/Dcap.groovy"

                // Clone the Open Enclave repo
                dir("${WORKSPACE}/openenclave") {
                    git url: 'https://github.com/Microsoft/openenclave.git'
                }

                // Run hardware tests using the libdcap_quoteprov.so build
                def task = """
                        cd ${WORKSPACE}/src/Linux
                        ./configure
                        make
                        mkdir -p ${WORKSPACE}/openenclave/build
                        cd ${WORKSPACE}/openenclave/build
                        git submodule update --recursive --init 
                        cmake ${WORKSPACE}/openenclave -G Ninja -DCMAKE_BUILD_TYPE=${build_type}
                        ninja -v
                        LD_LIBRARY_PATH=${WORKSPACE}/src/Linux ctest --output-on-failure
                       """
                dcap.Run(compiler, task)
            }
        }
    }
}

// Linux Google Unit Tests running on libdcap_quoteprov.so
def DCAPLinuxTest(String label, String version, String compiler, String build_type) {
    stage("${label} ${compiler} SGX1-FLC ${build_type}") {
        node("${label}") {
            timeout(GLOBAL_TIMEOUT) {
			
                cleanWs()
                checkout scm
				
                def dcap = load pwd() + "/.jenkins/src/Dcap.groovy"

                // Run hardware tests using the libdcap_quoteprov.so build
                def task = """
				        sudo apt-get install libssl-dev
                        sudo apt install libcurl4-openssl-dev
                        sudo apt-get install pkg-config
					    sudo apt install build-essential
                        sudo apt-get update -y
                        sudo apt-get install -y libgtest-dev
                        sudo apt-get install -y cmake
                        cd /usr/src/gtest
                        cmake CMakeLists.txt
                        make
                        cp *.a /usr/lib
                        cd ${WORKSPACE}/src/Linux
                        ./configure
                        make
						make install
						cd ${WORKSPACE}/src
						mkdir GoogleTest 
                        cp CMakeLists.txt ./GoogleTest/.
                        cd GoogleTest
                        cmake CMakeLists.txt
                        make
                        LD_LIBRARY_PATH=${WORKSPACE}/src dcap_provider_utests
                       """
                dcap.Run(compiler, task)
            }
        }
    }
}

// Test using oetools-test Docker image with /dev/sgx mounted inside container
def ACCContainerTest(String label, String version) {
    stage("Ubuntu ${version} Non-Simulation Container SGX1-FLC RelWithDebInfo") {
        node("${label}") {
            timeout(GLOBAL_TIMEOUT) {
			
                cleanWs()
                checkout scm
				
                def dcap = load pwd() + "/.jenkins/src/Dcap.groovy"

                // Clone the Open Enclave repo
                dir("${WORKSPACE}/openenclave") {
                    git url: 'https://github.com/Microsoft/openenclave.git'
                }

                // Run the OE tests from the git repository with the currently
                // generated az-dcap-client deb package installed
                def task = """
                        sudo apt-get purge az-dcap-client -y 
                        sudo apt-get update
                        sudo apt-get install sudo libcurl4-openssl-dev wget -y
                        cd ${WORKSPACE}/src/Linux
                        dpkg-buildpackage -us -uc
                        sudo dpkg -i ${WORKSPACE}/src/az-dcap-client_*_amd64.deb
                        mkdir -p ${WORKSPACE}/openenclave/build
                        cd ${WORKSPACE}/openenclave/build
                        git submodule update --recursive --init
                        cmake ${WORKSPACE}/openenclave -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo
                        ninja -v
                        ctest --output-on-failure
                       """
                dcap.ContainerRun("${DOCKER_REGISTRY}/oetools-full-${version}:latest", "clang-7", task, "--cap-add=SYS_PTRACE --device /dev/sgx:/dev/sgx")
            }
        }
    }
}

def ACCTestOeRelease(String label, String version) {
    stage("OpenEnclave release samples ${version}") {
        node("${label}") {
            timeout(GLOBAL_TIMEOUT) {
			
                cleanWs()
                checkout scm
				
                def dcap = load pwd() + "/.jenkins/src/Dcap.groovy"

                // Run the OE samples bundled with the published OE package, having
                // the currently generated az-dcap-client deb package installed
                def task = """
                        sudo apt-get purge az-dcap-client -y
                        sudo apt-get update
                        sudo apt-get install sudo libcurl4-openssl-dev wget -y
                        cd ${WORKSPACE}/src/Linux
                        dpkg-buildpackage -us -uc
                        sudo dpkg -i ${WORKSPACE}/src/az-dcap-client_*_amd64.deb
                        sudo apt-get update
                        sudo apt-get install -y open-enclave
                        . /opt/openenclave/share/openenclave/openenclaverc
                        cp -r /opt/openenclave/share/openenclave/samples/ ~/samples
                        for DIR in \$(find ~/samples/* -maxdepth 0 -type d); do
                            cd \$DIR
                            make build
                            make run
                        done
                       """
                dcap.ContainerRun("${DOCKER_REGISTRY}/oetools-full-${version}:latest", "clang-7", task, "--cap-add=SYS_PTRACE --device /dev/sgx:/dev/sgx")
            }
        }
    }
}

// Test DCAP build process
def DCAPBuildTest(String label, String build_type) {
    stage("${label} ${build_type}") {
        node("${label}") {
            timeout(GLOBAL_TIMEOUT) {
			
                cleanWs()
                checkout scm
                bat """
                    vcvars64.bat x64 && \
                    cd ${WORKSPACE}\\src\\Windows && \
					powershell -ExecutionPolicy Unrestricted -NoLogo -NonInteractive -Command ${WORKSPACE}\\src\\Windows\\get-prereqs.ps1 && \
					cd ${WORKSPACE}\\src\\Windows\\dll && \
					nuget.exe restore dcap_provider.vcxproj -PackagesDirectory packages && \
                    MSBuild.exe dcap_provider.vcxproj /p:Configuration=${build_type};Platform=x64 && \
                    cd ${WORKSPACE}\\src\\Windows\\UnitTest && \
					nuget.exe restore dcap_provider_ut.vcxproj -PackagesDirectory packages && \
                    MSBuild.exe dcap_provider_ut.vcxproj /p:Configuration=${build_type};Platform=x64 && \
                    xcopy /y /c ${WORKSPACE}\\src\\Windows\\UnitTest\\x64\\${build_type}\\dcap_provider_ut.exe ${WORKSPACE}\\src\\Windows\\dll\\x64\\${build_type} && \
                    cd ${WORKSPACE}\\src\\Windows\\dll\\x64\\${build_type} && \
                    dcap_provider_ut.exe
                """
            }
        }
    }
}

parallel "ACC1604 SGX1-FLC Container RelWithDebInfo" : { ACCContainerTest('ACC-1604', '16.04') },
         "ACC1804 SGX1-FLC Container RelWithDebInfo" : { ACCContainerTest('ACC-1804', '18.04') },
         "ACC1604 SGX1-FLC clang-7 Debug" :            { ACCTest('ACC-1604', '16.04', 'clang-7', 'Debug') },
         "ACC1604 SGX1-FLC clang-7 Release" :          { ACCTest('ACC-1604', '16.04', 'clang-7', 'Release') },
         "ACC1604 SGX1-FLC clang-7 RelWithDebInfo" :   { ACCTest('ACC-1604', '16.04', 'clang-7', 'RelWithDebInfo') },
         "ACC1604 SGX1-FLC gcc Debug" :                { ACCTest('ACC-1604', '16.04', 'gcc', 'Debug') },
         "ACC1604 SGX1-FLC gcc Release" :              { ACCTest('ACC-1604', '16.04', 'gcc', 'Release') },
         "ACC1604 SGX1-FLC gcc RelWithDebInfo" :       { ACCTest('ACC-1604', '16.04', 'gcc', 'RelWithDebInfo') },
         "ACC1804 SGX1-FLC clang-7 Debug" :            { ACCTest('ACC-1804', '18.04', 'clang-7', 'Debug') },
         "ACC1804 SGX1-FLC clang-7 Release" :          { ACCTest('ACC-1804', '18.04', 'clang-7', 'Release') },
         "ACC1804 SGX1-FLC clang-7 RelWithDebInfo" :   { ACCTest('ACC-1804', '18.04', 'clang-7', 'RelWithDebInfo') },
         "ACC1804 SGX1-FLC gcc Debug" :                { ACCTest('ACC-1804', '18.04', 'gcc', 'Debug') },
         "ACC1804 SGX1-FLC gcc Release" :              { ACCTest('ACC-1804', '18.04', 'gcc', 'Release') },
         "ACC1804 SGX1-FLC gcc RelWithDebInfo" :       { ACCTest('ACC-1804', '18.04', 'gcc', 'RelWithDebInfo') },
         "ACC1604 OpenEnclave Release Test" :          { ACCTestOeRelease('ACC-1604','16.04') },
         "ACC1804 OpenEnclave Release Test" :          { ACCTestOeRelease('ACC-1804','18.04') },
		 "ACC1604 DCAP Linux clang-7 Release" :        { DCAPLinuxTest('ACC-1604', '16.04', 'clang-7', 'Release') },
		 "ACC1604 DCAP gcc clang-7 Release" :          { DCAPLinuxTest('ACC-1604', '16.04', 'gcc', 'Release') },
         "ACCWin 2016 DCAP Debug Test" :               { DCAPBuildTest('SGXFLC-Windows-2016-DCAP', 'Debug') },
         "ACCWin 2016 DCAP Release Test" :             { DCAPBuildTest('SGXFLC-Windows-2016-DCAP', 'Release') },
         "ACCWin 2019 DCAP Debug Test" :               { DCAPBuildTest('SGXFLC-Windows-2019-DCAP', 'Debug') },
         "ACCWin 2019 DCAP Release Test" :             { DCAPBuildTest('SGXFLC-Windows-2019-DCAP', 'Release') }
